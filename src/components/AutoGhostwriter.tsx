import React, { useState } from 'react';
import { FileText, Loader2, Lock, Copy, Download, BookOpen, Zap, Target } from 'lucide-react';
import { generateGhostwrittenContent } from '../services/businessFeatures';
import { GhostwriterResult } from '../types/businessFeatures';

interface AutoGhostwriterProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const AutoGhostwriter: React.FC<AutoGhostwriterProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [contentTopic, setContentTopic] = useState('');
  const [contentType, setContentType] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [ghostwriterResult, setGhostwriterResult] = useState<GhostwriterResult | null>(null);

  const contentTypes = [
    'Blog Post',
    'LinkedIn Article',
    'Twitter Thread',
    'Newsletter',
    'Case Study',
    'White Paper',
    'Press Release',
    'Product Description'
  ];

  const handleGenerate = async () => {
    if (!contentTopic.trim() || !contentType) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateGhostwrittenContent(contentTopic, contentType);
      setGhostwriterResult(result);
    } catch (error) {
      console.error('Error generating ghostwritten content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!ghostwriterResult) return;

    const content = `
AUTO-GHOSTWRITER: ${ghostwriterResult.contentType.toUpperCase()}
=================================================
Generated: ${new Date().toLocaleDateString()}
Topic: ${ghostwriterResult.contentTopic}

TITLE
-----
${ghostwriterResult.title}

CONTENT
-------
${ghostwriterResult.content}

SEO KEYWORDS
-----------
${ghostwriterResult.seoKeywords.join(', ')}

SOCIAL MEDIA PROMOTION
--------------------
${ghostwriterResult.socialPromotion.map((promo, i) => `${i + 1}. ${promo}`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ghostwritten-${contentType.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Auto-Ghostwriter‚Ñ¢
          </h2>
          <p className="text-gray-400">
            Generate publication-ready content in your brand voice with one click
          </p>
        </div>

        {!ghostwriterResult ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Content Topic</label>
                  <input
                    type="text"
                    value={contentTopic}
                    onChange={(e) => setContentTopic(e.target.value)}
                    placeholder="e.g., 'The future of remote work' or 'Benefits of our new product'..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Content Type</label>
                  <select
                    value={contentType}
                    onChange={(e) => setContentType(e.target.value)}
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             focus:border-yellow-400 focus:outline-none"
                  >
                    <option value="">Select Content Type</option>
                    {contentTypes.map((type) => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !contentTopic.trim() || !contentType}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Ghostwriting Content...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Auto-Ghostwriter - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <FileText className="w-5 h-5" />
                    <span>Generate Content</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  ‚ú® Free trial ‚Ä¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                üìù Your {ghostwriterResult.contentType} is Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Content</span>
              </button>
            </div>

            {/* Title */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <BookOpen className="w-6 h-6 text-blue-400" />
                  <h4 className="text-blue-400 font-bold text-lg">Title</h4>
                </div>
                <button
                  onClick={() => handleCopy(ghostwriterResult.title)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                <p className="text-white font-medium text-lg">{ghostwriterResult.title}</p>
              </div>
            </div>

            {/* Content */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-6 h-6 text-green-400" />
                  <h4 className="text-green-400 font-bold text-lg">Content</h4>
                </div>
                <button
                  onClick={() => handleCopy(ghostwriterResult.content)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="bg-gray-900/50 rounded-lg p-4 max-h-96 overflow-y-auto">
                <div className="text-gray-300 whitespace-pre-line">{ghostwriterResult.content}</div>
              </div>
            </div>

            {/* SEO & Promotion */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Zap className="w-6 h-6 text-yellow-400" />
                  <h4 className="text-yellow-400 font-bold text-lg">SEO Keywords</h4>
                </div>
                <div className="flex flex-wrap gap-2">
                  {ghostwriterResult.seoKeywords.map((keyword, index) => (
                    <span key={index} className="bg-yellow-500/10 text-yellow-400 px-3 py-1 rounded-full text-sm">
                      {keyword}
                    </span>
                  ))}
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Target className="w-6 h-6 text-purple-400" />
                  <h4 className="text-purple-400 font-bold text-lg">Social Promotion</h4>
                </div>
                <div className="space-y-3">
                  {ghostwriterResult.socialPromotion.map((promo, index) => (
                    <div key={index} className="bg-purple-500/10 border border-purple-500/20 rounded-lg p-3">
                      <p className="text-gray-300 text-sm">{promo}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default AutoGhostwriter;