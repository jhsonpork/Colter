import React, { useState } from 'react';
import { BookOpen, Loader2, Lock, Copy, FileText, Video, Download } from 'lucide-react';
import { generateCourseSummary } from '../services/moreFeatures';
import { CourseSummaryGenerator as CourseSummaryGeneratorType } from '../types/moreFeatures';

interface CourseSummaryGeneratorProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const CourseSummaryGenerator: React.FC<CourseSummaryGeneratorProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [syllabus, setSyllabus] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [summary, setSummary] = useState<CourseSummaryGeneratorType | null>(null);

  const handleGenerate = async () => {
    if (!syllabus.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateCourseSummary(syllabus);
      setSummary(result);
    } catch (error) {
      console.error('Error generating course summary:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!summary) return;

    const content = `
COURSE SUMMARY GENERATOR
=======================
Generated: ${new Date().toLocaleDateString()}

ORIGINAL SYLLABUS
----------------
${summary.syllabus}

3-MINUTE SCRIPT
-------------
${summary.summary.threeMinuteScript}

SCRIPT HOOKS
-----------
${summary.summary.scriptHooks.map((hook, i) => `${i + 1}. ${hook}`).join('\n')}

LEAD MAGNET
----------
${summary.summary.leadMagnet}

INFOPRODUCT SUGGESTIONS
---------------------
${summary.summary.infoproductSuggestions.map((product, i) => `${i + 1}. ${product}`).join('\n')}

---
Generated by AdRocket AI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `course-summary-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            AI Course Summary Generator
          </h2>
          <p className="text-gray-400">
            Reverse-engineer any course syllabus into viral content and lead magnets
          </p>
        </div>

        {!summary ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div>
                <label className="text-white font-medium mb-2 block">Course Syllabus or Curriculum</label>
                <textarea
                  value={syllabus}
                  onChange={(e) => setSyllabus(e.target.value)}
                  placeholder="Paste a course syllabus, curriculum, or outline here..."
                  className="w-full h-40 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                           placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                />
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !syllabus.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating Summary...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Course Generator - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <BookOpen className="w-5 h-5" />
                    <span>Generate Course Summary</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸŽ“ Course Summary Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Summary</span>
              </button>
            </div>

            {/* 3-Minute Script */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <Video className="w-6 h-6 text-blue-400" />
                  <h4 className="text-blue-400 font-bold text-lg">3-Minute YouTube/TikTok Script</h4>
                </div>
                <button
                  onClick={() => handleCopy(summary.summary.threeMinuteScript)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="bg-gray-900/50 rounded-lg p-4">
                <p className="text-gray-300 text-sm whitespace-pre-line">{summary.summary.threeMinuteScript}</p>
              </div>
            </div>

            {/* Script Hooks */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">ðŸŽ£ Script Hooks for Short-Form</h4>
              <div className="space-y-3">
                {summary.summary.scriptHooks.map((hook, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <div className="flex justify-between items-start">
                      <h5 className="text-white font-semibold">Hook #{index + 1}</h5>
                      <button
                        onClick={() => handleCopy(hook)}
                        className="p-2 text-gray-400 hover:text-white transition-colors"
                      >
                        <Copy className="w-4 h-4" />
                      </button>
                    </div>
                    <p className="text-gray-300 text-sm mt-2">{hook}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Lead Magnet */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-6 h-6 text-green-400" />
                  <h4 className="text-green-400 font-bold text-lg">1-Page Lead Magnet</h4>
                </div>
                <button
                  onClick={() => handleCopy(summary.summary.leadMagnet)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                <p className="text-gray-300 text-sm">{summary.summary.leadMagnet}</p>
              </div>
            </div>

            {/* Infoproduct Suggestions */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">ðŸ’° Infoproduct Suggestions</h4>
              <div className="grid md:grid-cols-3 gap-4">
                {summary.summary.infoproductSuggestions.map((product, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <h5 className="text-white font-semibold mb-2">Product Idea #{index + 1}</h5>
                    <p className="text-gray-300 text-sm">{product}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default CourseSummaryGenerator;