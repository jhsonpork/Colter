import React, { useState } from 'react';
import { FileBox, Loader2, Lock, Copy, Download, BookOpen, FileText, Presentation, DollarSign } from 'lucide-react';
import { generateDigitalProduct } from '../services/moreFeatures';
import { DigitalProductGenerator as DigitalProductGeneratorType } from '../types/moreFeatures';

interface DigitalProductGeneratorProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const DigitalProductGenerator: React.FC<DigitalProductGeneratorProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [niche, setNiche] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [digitalProduct, setDigitalProduct] = useState<DigitalProductGeneratorType | null>(null);

  const handleGenerate = async () => {
    if (!niche.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateDigitalProduct(niche);
      setDigitalProduct(result);
    } catch (error) {
      console.error('Error generating digital product:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!digitalProduct) return;

    let content = `
ULTIMATE DIGITAL PRODUCT GENERATOR
================================
Generated: ${new Date().toLocaleDateString()}

NICHE
----
${digitalProduct.niche}

PRODUCT
------
Type: ${digitalProduct.product.type}
Title: ${digitalProduct.product.title}
Description: ${digitalProduct.product.description}

Outline:
${digitalProduct.product.outline.map((item, i) => `${i + 1}. ${item}`).join('\n')}

Unique Selling Points:
${digitalProduct.product.uniqueSellingPoints.map((point, i) => `${i + 1}. ${point}`).join('\n')}

EBOOK
-----
Chapters:
${digitalProduct.ebook.chapters.map((chapter, i) => `${i + 1}. ${chapter}`).join('\n')}

Page Count: ${digitalProduct.ebook.pageCount}
Cover Concept: ${digitalProduct.ebook.coverConcept}

LEAD MAGNETS
-----------
${digitalProduct.leadMagnets.map((magnet, i) => `${i + 1}. ${magnet}`).join('\n')}

TEMPLATES
--------
${digitalProduct.templates.map((template, i) => `${i + 1}. ${template}`).join('\n')}

SLIDE DECK
---------
Sections:
${digitalProduct.slidedeckContent.sections.map((section, i) => `${i + 1}. ${section}`).join('\n')}

Slide Count: ${digitalProduct.slidedeckContent.slideCount}

SALES PAGE
---------
Headline: ${digitalProduct.salesPage.headline}

Pain Points:
${digitalProduct.salesPage.painPoints.map((point, i) => `${i + 1}. ${point}`).join('\n')}

Benefits:
${digitalProduct.salesPage.benefits.map((benefit, i) => `${i + 1}. ${benefit}`).join('\n')}

Testimonial Templates:
${digitalProduct.salesPage.testimonialTemplates.map((testimonial, i) => `${i + 1}. ${testimonial}`).join('\n')}

Pricing Strategy: ${digitalProduct.salesPage.pricingStrategy}

PRICING TIERS
-----------
${digitalProduct.pricingTiers.map(tier => 
  `${tier.tier} - $${tier.price}
Includes: ${tier.includes.join(', ')}
License Terms: ${tier.licenseTerms}`
).join('\n\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `digital-product-${niche.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Ultimate Digital Product Generator
          </h2>
          <p className="text-gray-400">
            Generate a complete, sellable digital product in minutes
          </p>
        </div>

        {!digitalProduct ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div>
                <label className="text-white font-medium mb-2 block">Your Niche</label>
                <input
                  type="text"
                  value={niche}
                  onChange={(e) => setNiche(e.target.value)}
                  placeholder="e.g., productivity for entrepreneurs, fitness for beginners, social media marketing..."
                  className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                           placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                />
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !niche.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating Digital Product...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Product Generator - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <FileBox className="w-5 h-5" />
                    <span>Generate Digital Product</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸ“š {digitalProduct.product.title}
              </h3>
              <p className="text-gray-400 mb-4">{digitalProduct.product.type} for {digitalProduct.niche}</p>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Product</span>
              </button>
            </div>

            {/* Product Overview */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h4 className="text-yellow-400 font-bold text-lg">ðŸ“‹ Product Overview</h4>
                <button
                  onClick={() => handleCopy(`${digitalProduct.product.title}\n\n${digitalProduct.product.description}\n\n${digitalProduct.product.uniqueSellingPoints.join('\n')}`)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Description</h5>
                  <p className="text-gray-300 text-sm">{digitalProduct.product.description}</p>
                </div>
                
                <div>
                  <h5 className="text-white font-semibold mb-2">Unique Selling Points</h5>
                  <ul className="space-y-2">
                    {digitalProduct.product.uniqueSellingPoints.map((point, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{point}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* eBook & Templates */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <BookOpen className="w-6 h-6 text-blue-400" />
                  <h4 className="text-blue-400 font-bold text-lg">eBook ({digitalProduct.ebook.pageCount} pages)</h4>
                </div>
                <div className="space-y-4">
                  <div>
                    <h5 className="text-white font-semibold mb-2">Chapters</h5>
                    <ol className="space-y-2 list-decimal list-inside">
                      {digitalProduct.ebook.chapters.map((chapter, i) => (
                        <li key={i} className="text-gray-300 text-sm">{chapter}</li>
                      ))}
                    </ol>
                  </div>
                  <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                    <h5 className="text-blue-400 font-semibold mb-2">Cover Concept</h5>
                    <p className="text-gray-300 text-sm">{digitalProduct.ebook.coverConcept}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <FileText className="w-6 h-6 text-green-400" />
                  <h4 className="text-green-400 font-bold text-lg">Templates & Lead Magnets</h4>
                </div>
                <div className="space-y-4">
                  <div>
                    <h5 className="text-white font-semibold mb-2">Printable Templates</h5>
                    <ul className="space-y-2">
                      {digitalProduct.templates.map((template, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{template}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h5 className="text-white font-semibold mb-2">Lead Magnets</h5>
                    <ul className="space-y-2">
                      {digitalProduct.leadMagnets.map((magnet, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-purple-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{magnet}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            {/* Slide Deck */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Presentation className="w-6 h-6 text-purple-400" />
                <h4 className="text-purple-400 font-bold text-lg">Slide Deck ({digitalProduct.slidedeckContent.slideCount} slides)</h4>
              </div>
              <div className="bg-purple-500/10 border border-purple-500/20 rounded-lg p-4">
                <h5 className="text-white font-semibold mb-2">Sections</h5>
                <ol className="space-y-2 list-decimal list-inside">
                  {digitalProduct.slidedeckContent.sections.map((section, i) => (
                    <li key={i} className="text-gray-300 text-sm">{section}</li>
                  ))}
                </ol>
              </div>
            </div>

            {/* Sales Page */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h4 className="text-yellow-400 font-bold text-lg">ðŸ›’ Sales Page</h4>
                <button
                  onClick={() => handleCopy(`${digitalProduct.salesPage.headline}\n\nPain Points:\n${digitalProduct.salesPage.painPoints.join('\n')}\n\nBenefits:\n${digitalProduct.salesPage.benefits.join('\n')}`)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Headline</h5>
                  <p className="text-gray-300 text-lg">{digitalProduct.salesPage.headline}</p>
                </div>
                
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <h5 className="text-white font-semibold mb-2">Pain Points</h5>
                    <ul className="space-y-2">
                      {digitalProduct.salesPage.painPoints.map((point, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-red-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{point}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h5 className="text-white font-semibold mb-2">Benefits</h5>
                    <ul className="space-y-2">
                      {digitalProduct.salesPage.benefits.map((benefit, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                
                <div className="bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-4">
                  <h5 className="text-yellow-400 font-semibold mb-2">Pricing Strategy</h5>
                  <p className="text-gray-300 text-sm">{digitalProduct.salesPage.pricingStrategy}</p>
                </div>
              </div>
            </div>

            {/* Pricing Tiers */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <DollarSign className="w-6 h-6 text-green-400" />
                <h4 className="text-green-400 font-bold text-lg">Pricing Tiers</h4>
              </div>
              <div className="grid md:grid-cols-3 gap-6">
                {digitalProduct.pricingTiers.map((tier, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <h5 className="text-white font-semibold mb-2">{tier.tier} - ${tier.price}</h5>
                    <ul className="space-y-1 mb-3">
                      {tier.includes.map((item, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                    <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-2">
                      <p className="text-blue-400 text-xs">License: {tier.licenseTerms}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Launch Strategy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">ðŸš€ Launch Strategy</h4>
              <div className="grid md:grid-cols-3 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-3">Pre-Launch</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Create lead magnet from one template</li>
                    <li>â€¢ Build email list with free content</li>
                    <li>â€¢ Tease product on social media</li>
                    <li>â€¢ Gather early testimonials</li>
                    <li>â€¢ Set up payment processing</li>
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Launch Week</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Email sequence to your list</li>
                    <li>â€¢ Early-bird pricing for 48 hours</li>
                    <li>â€¢ Live Q&A session about the topic</li>
                    <li>â€¢ Share customer success stories</li>
                    <li>â€¢ Create urgency with bonuses</li>
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Post-Launch</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Collect feedback for improvements</li>
                    <li>â€¢ Create case studies from results</li>
                    <li>â€¢ Set up affiliate program</li>
                    <li>â€¢ Plan content for next product</li>
                    <li>â€¢ Create upsell opportunities</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default DigitalProductGenerator;