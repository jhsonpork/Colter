import React, { useState } from 'react';
import { Share2, Loader2, Lock, Copy, Download, TrendingUp, Target, Users } from 'lucide-react';
import { generateDistributionStack } from '../services/businessFeatures';
import { DistributionStackResult } from '../types/businessFeatures';

interface DistributionStackProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const DistributionStack: React.FC<DistributionStackProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [productDescription, setProductDescription] = useState('');
  const [targetAudience, setTargetAudience] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [stackResult, setStackResult] = useState<DistributionStackResult | null>(null);

  const handleGenerate = async () => {
    if (!productDescription.trim() || !targetAudience.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateDistributionStack(productDescription, targetAudience);
      setStackResult(result);
    } catch (error) {
      console.error('Error generating distribution stack:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!stackResult) return;

    const content = `
DISTRIBUTION STACK BLUEPRINT
==========================
Generated: ${new Date().toLocaleDateString()}

PRODUCT DESCRIPTION
-----------------
${stackResult.productDescription}

TARGET AUDIENCE
-------------
${stackResult.targetAudience}

DISTRIBUTION CHANNELS
-------------------
${stackResult.distributionChannels.map((channel, i) => 
  `${i + 1}. ${channel.channel}
Priority: ${channel.priority}/10
Strategy: ${channel.strategy}
KPIs: ${channel.kpis.join(', ')}
`).join('\n')}

CONTENT STRATEGY
--------------
${stackResult.contentStrategy.map((content, i) => 
  `${i + 1}. ${content.type}
Purpose: ${content.purpose}
Distribution: ${content.distribution}
Frequency: ${content.frequency}
`).join('\n')}

GROWTH TACTICS
------------
${stackResult.growthTactics.map((tactic, i) => `${i + 1}. ${tactic}`).join('\n')}

AUTOMATION OPPORTUNITIES
---------------------
${stackResult.automationOpportunities.map((automation, i) => `${i + 1}. ${automation}`).join('\n')}

RESOURCE ALLOCATION
-----------------
${stackResult.resourceAllocation.map((resource) => `${resource.area}: ${resource.allocation}`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `distribution-stack-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Distribution Stack Builder™
          </h2>
          <p className="text-gray-400">
            Build a complete go-to-market distribution system for any product
          </p>
        </div>

        {!stackResult ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Product Description</label>
                  <textarea
                    value={productDescription}
                    onChange={(e) => setProductDescription(e.target.value)}
                    placeholder="Describe your product or service in detail..."
                    className="w-full h-24 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Target Audience</label>
                  <textarea
                    value={targetAudience}
                    onChange={(e) => setTargetAudience(e.target.value)}
                    placeholder="Describe your ideal customers or users..."
                    className="w-full h-24 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                  />
                </div>
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !productDescription.trim() || !targetAudience.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Building Distribution Stack...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Distribution Stack - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Share2 className="w-5 h-5" />
                    <span>Build Distribution Stack</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  ✨ Free trial • No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                🚀 Your Distribution Stack is Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Stack</span>
              </button>
            </div>

            {/* Distribution Channels */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-yellow-400 font-bold text-lg mb-4">📣 Distribution Channels</h3>
              <div className="space-y-4">
                {stackResult.distributionChannels.map((channel, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="text-white font-semibold">{channel.channel}</h4>
                      <span className="bg-yellow-500/20 text-yellow-400 px-2 py-1 rounded-full text-xs">
                        Priority: {channel.priority}/10
                      </span>
                    </div>
                    <p className="text-gray-300 text-sm mb-3">{channel.strategy}</p>
                    <div className="flex flex-wrap gap-2">
                      {channel.kpis.map((kpi, i) => (
                        <span key={i} className="bg-blue-500/10 text-blue-400 px-2 py-1 rounded-full text-xs">
                          {kpi}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Content Strategy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <TrendingUp className="w-6 h-6 text-blue-400" />
                <h3 className="text-blue-400 font-bold text-lg">Content Strategy</h3>
              </div>
              <div className="grid md:grid-cols-2 gap-4">
                {stackResult.contentStrategy.map((content, index) => (
                  <div key={index} className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                    <h4 className="text-blue-400 font-semibold mb-2">{content.type}</h4>
                    <p className="text-gray-300 text-sm mb-2"><strong>Purpose:</strong> {content.purpose}</p>
                    <p className="text-gray-300 text-sm mb-2"><strong>Distribution:</strong> {content.distribution}</p>
                    <p className="text-gray-300 text-sm"><strong>Frequency:</strong> {content.frequency}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Growth Tactics */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <Target className="w-6 h-6 text-green-400" />
                  <h3 className="text-green-400 font-bold text-lg">Growth Tactics</h3>
                </div>
                <button
                  onClick={() => handleCopy(stackResult.growthTactics.join('\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {stackResult.growthTactics.map((tactic, index) => (
                  <div key={index} className="flex items-start space-x-3 bg-green-500/10 border border-green-500/20 rounded-lg p-3">
                    <span className="bg-green-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0">
                      {index + 1}
                    </span>
                    <p className="text-gray-300 text-sm">{tactic}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Automation & Resources */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <h3 className="text-purple-400 font-bold text-lg mb-4">⚙️ Automation Opportunities</h3>
                <div className="space-y-3">
                  {stackResult.automationOpportunities.map((automation, index) => (
                    <div key={index} className="flex items-start space-x-3 bg-purple-500/10 border border-purple-500/20 rounded-lg p-3">
                      <div className="w-2 h-2 bg-purple-400 rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-gray-300 text-sm">{automation}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Users className="w-6 h-6 text-red-400" />
                  <h3 className="text-red-400 font-bold text-lg">Resource Allocation</h3>
                </div>
                <div className="space-y-3">
                  {stackResult.resourceAllocation.map((resource, index) => (
                    <div key={index} className="flex justify-between items-center bg-red-500/10 border border-red-500/20 rounded-lg p-3">
                      <p className="text-gray-300 text-sm">{resource.area}</p>
                      <span className="bg-gray-900/50 text-white px-2 py-1 rounded-full text-xs">
                        {resource.allocation}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default DistributionStack;