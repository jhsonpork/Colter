import React, { useState } from 'react';
import { Lightbulb, Loader2, Lock, Copy, Download, Briefcase, DollarSign, Target, Users } from 'lucide-react';
import { generateIdeaToCompany } from '../services/businessFeatures';
import { IdeaToCompanyResult } from '../types/businessFeatures';

interface IdeaToCompanyProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const IdeaToCompany: React.FC<IdeaToCompanyProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [businessIdea, setBusinessIdea] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [companyResult, setCompanyResult] = useState<IdeaToCompanyResult | null>(null);

  const handleGenerate = async () => {
    if (!businessIdea.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateIdeaToCompany(businessIdea);
      setCompanyResult(result);
    } catch (error) {
      console.error('Error generating company plan:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!companyResult) return;

    const content = `
IDEA-TO-COMPANY BLUEPRINT
=========================
Generated: ${new Date().toLocaleDateString()}

BUSINESS IDEA
------------
${companyResult.businessIdea}

BUSINESS MODEL
-------------
${companyResult.businessModel}

MARKET ANALYSIS
-------------
Target Market: ${companyResult.marketAnalysis.targetMarket}
Market Size: ${companyResult.marketAnalysis.marketSize}
Competitors: ${companyResult.marketAnalysis.competitors}
Unique Value Proposition: ${companyResult.marketAnalysis.uniqueValueProposition}

REVENUE STREAMS
-------------
${companyResult.revenueStreams.map((stream, i) => `${i + 1}. ${stream}`).join('\n')}

STARTUP COSTS
-----------
${companyResult.startupCosts.map((cost) => `${cost.item}: ${cost.estimate}`).join('\n')}

LAUNCH PLAN
----------
${companyResult.launchPlan.map((step, i) => `${i + 1}. ${step}`).join('\n')}

PITCH DECK OUTLINE
----------------
${companyResult.pitchDeckOutline.map((slide, i) => `Slide ${i + 1}: ${slide}`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `idea-to-company-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Idea-to-Company Generatorâ„¢
          </h2>
          <p className="text-gray-400">
            Transform your business idea into a complete company blueprint in seconds
          </p>
        </div>

        {!companyResult ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div>
                <label className="text-white font-medium mb-2 block">Your Business Idea</label>
                <textarea
                  value={businessIdea}
                  onChange={(e) => setBusinessIdea(e.target.value)}
                  placeholder="Describe your business idea in detail..."
                  className="w-full h-32 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                           placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                />
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !businessIdea.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating Company Blueprint...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Idea-to-Company - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Lightbulb className="w-5 h-5" />
                    <span>Generate Company Blueprint</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸš€ Your Company Blueprint is Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Blueprint</span>
              </button>
            </div>

            {/* Business Model */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Briefcase className="w-6 h-6 text-blue-400" />
                <h4 className="text-blue-400 font-bold text-lg">Business Model</h4>
              </div>
              <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                <p className="text-gray-300">{companyResult.businessModel}</p>
              </div>
            </div>

            {/* Market Analysis */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Target className="w-6 h-6 text-green-400" />
                <h4 className="text-green-400 font-bold text-lg">Market Analysis</h4>
              </div>
              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Target Market</h5>
                  <p className="text-gray-300 text-sm">{companyResult.marketAnalysis.targetMarket}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Market Size</h5>
                  <p className="text-gray-300 text-sm">{companyResult.marketAnalysis.marketSize}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Competitors</h5>
                  <p className="text-gray-300 text-sm">{companyResult.marketAnalysis.competitors}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Unique Value Proposition</h5>
                  <p className="text-gray-300 text-sm">{companyResult.marketAnalysis.uniqueValueProposition}</p>
                </div>
              </div>
            </div>

            {/* Revenue Streams */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <DollarSign className="w-6 h-6 text-yellow-400" />
                <h4 className="text-yellow-400 font-bold text-lg">Revenue Streams</h4>
              </div>
              <div className="space-y-3">
                {companyResult.revenueStreams.map((stream, index) => (
                  <div key={index} className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-3">
                    <p className="text-gray-300 text-sm">{stream}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Startup Costs */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-red-400 font-bold text-lg mb-4">ðŸ’° Startup Costs</h4>
              <div className="overflow-x-auto">
                <table className="w-full text-left">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="py-2 px-4 text-gray-400">Item</th>
                      <th className="py-2 px-4 text-gray-400">Estimated Cost</th>
                    </tr>
                  </thead>
                  <tbody>
                    {companyResult.startupCosts.map((cost, index) => (
                      <tr key={index} className="border-b border-gray-800">
                        <td className="py-2 px-4 text-gray-300">{cost.item}</td>
                        <td className="py-2 px-4 text-gray-300">{cost.estimate}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Launch Plan */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-purple-400 font-bold text-lg mb-4">ðŸš€ Launch Plan</h4>
              <div className="space-y-3">
                {companyResult.launchPlan.map((step, index) => (
                  <div key={index} className="flex items-start space-x-3 bg-purple-500/10 border border-purple-500/20 rounded-lg p-3">
                    <span className="bg-purple-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0">
                      {index + 1}
                    </span>
                    <p className="text-gray-300 text-sm">{step}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Pitch Deck Outline */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h4 className="text-blue-400 font-bold text-lg">ðŸ“Š Pitch Deck Outline</h4>
                <button
                  onClick={() => handleCopy(companyResult.pitchDeckOutline.join('\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {companyResult.pitchDeckOutline.map((slide, index) => (
                  <div key={index} className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                    <p className="text-gray-300 text-sm">
                      <span className="text-blue-400 font-medium">Slide {index + 1}:</span> {slide}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default IdeaToCompany;