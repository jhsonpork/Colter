import React, { useState } from 'react';
import { Coins, Loader2, Lock, Copy, DollarSign, Clock, TrendingUp, Download } from 'lucide-react';
import { generateIncomeStreams } from '../services/moreFeatures';
import { IncomeStreamGenerator as IncomeStreamGeneratorType } from '../types/moreFeatures';

interface IncomeStreamGeneratorProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const IncomeStreamGenerator: React.FC<IncomeStreamGeneratorProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [interests, setInterests] = useState('');
  const [skills, setSkills] = useState('');
  const [niche, setNiche] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [incomeStreams, setIncomeStreams] = useState<IncomeStreamGeneratorType | null>(null);

  const handleGenerate = async () => {
    if (!interests.trim() || !skills.trim() || !niche.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateIncomeStreams(interests, skills, niche);
      setIncomeStreams(result);
    } catch (error) {
      console.error('Error generating income streams:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!incomeStreams) return;

    let content = `
INCOME STREAM GENERATOR 360â„¢
===========================
Generated: ${new Date().toLocaleDateString()}

PROFILE
------
Interests: ${incomeStreams.interests}
Skills: ${incomeStreams.skills}
Niche: ${incomeStreams.niche}

INCOME STREAMS
------------
${incomeStreams.incomeStreams.map((stream, i) => 
  `STREAM ${i + 1}: ${stream.type}
Description: ${stream.description}

Action Plan:
${stream.actionPlan.map((step, j) => `${j + 1}. ${step}`).join('\n')}

Tools: ${stream.tools.join(', ')}

Time vs. Reward:
- Setup Time: ${stream.timeVsReward.setupTime}
- Maintenance Time: ${stream.timeVsReward.maintenanceTime}
- Potential Income: ${stream.timeVsReward.potentialIncome}
- Scalability: ${stream.timeVsReward.scalability}/10

30-Day Ramp-Up Checklist:
${stream.rampUpChecklist.map((item, j) => `${j + 1}. ${item}`).join('\n')}
`).join('\n\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `income-streams-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const getScalabilityColor = (score: number) => {
    if (score >= 8) return 'text-green-400';
    if (score >= 6) return 'text-yellow-400';
    return 'text-red-400';
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Income Stream Generator 360â„¢
          </h2>
          <p className="text-gray-400">
            Generate 5 fully-built income stream paths based on your interests and skills
          </p>
        </div>

        {!incomeStreams ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Your Interests</label>
                  <input
                    type="text"
                    value={interests}
                    onChange={(e) => setInterests(e.target.value)}
                    placeholder="e.g., fitness, cooking, technology, travel, art..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Your Skills</label>
                  <input
                    type="text"
                    value={skills}
                    onChange={(e) => setSkills(e.target.value)}
                    placeholder="e.g., writing, design, coding, teaching, speaking..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Your Niche</label>
                  <input
                    type="text"
                    value={niche}
                    onChange={(e) => setNiche(e.target.value)}
                    placeholder="e.g., fitness for busy professionals, sustainable living, productivity..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !interests.trim() || !skills.trim() || !niche.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating Income Streams...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Income Generator - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Coins className="w-5 h-5" />
                    <span>Generate 5 Income Streams</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸ’° 5 Income Streams for {incomeStreams.niche}
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Plan</span>
              </button>
            </div>

            {/* Income Streams */}
            <div className="space-y-6">
              {incomeStreams.incomeStreams.map((stream, index) => (
                <div key={index} className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex items-center space-x-3">
                      <div className="bg-green-500/20 p-2 rounded-lg">
                        <DollarSign className="w-5 h-5 text-green-400" />
                      </div>
                      <div>
                        <h4 className="text-green-400 font-bold text-lg">Stream #{index + 1}: {stream.type}</h4>
                        <div className="flex items-center space-x-2 mt-1">
                          <span className="text-gray-400 text-sm">Scalability:</span>
                          <span className={`font-bold ${getScalabilityColor(stream.timeVsReward.scalability)}`}>
                            {stream.timeVsReward.scalability}/10
                          </span>
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => handleCopy(`${stream.type}\n\n${stream.description}\n\nAction Plan:\n${stream.actionPlan.join('\n')}`)}
                      className="p-2 text-gray-400 hover:text-white transition-colors"
                    >
                      <Copy className="w-4 h-4" />
                    </button>
                  </div>

                  <div className="bg-gray-900/50 rounded-lg p-4 mb-4">
                    <p className="text-gray-300 text-sm">{stream.description}</p>
                  </div>

                  <div className="grid md:grid-cols-2 gap-6 mb-4">
                    <div>
                      <h5 className="text-white font-semibold mb-3">Action Plan</h5>
                      <ol className="space-y-2 list-decimal list-inside">
                        {stream.actionPlan.map((step, i) => (
                          <li key={i} className="text-gray-300 text-sm">{step}</li>
                        ))}
                      </ol>
                    </div>
                    <div>
                      <h5 className="text-white font-semibold mb-3">Tools & Platforms</h5>
                      <div className="flex flex-wrap gap-2">
                        {stream.tools.map((tool, i) => (
                          <span key={i} className="bg-blue-500/10 text-blue-400 px-2 py-1 rounded-full text-xs">
                            {tool}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="grid md:grid-cols-3 gap-4 mb-4">
                    <div className="bg-gray-900/50 rounded-lg p-3 text-center">
                      <Clock className="w-5 h-5 text-blue-400 mx-auto mb-1" />
                      <h6 className="text-blue-400 text-xs font-medium mb-1">Setup Time</h6>
                      <p className="text-white text-sm">{stream.timeVsReward.setupTime}</p>
                    </div>
                    <div className="bg-gray-900/50 rounded-lg p-3 text-center">
                      <Clock className="w-5 h-5 text-purple-400 mx-auto mb-1" />
                      <h6 className="text-purple-400 text-xs font-medium mb-1">Maintenance</h6>
                      <p className="text-white text-sm">{stream.timeVsReward.maintenanceTime}</p>
                    </div>
                    <div className="bg-gray-900/50 rounded-lg p-3 text-center">
                      <TrendingUp className="w-5 h-5 text-green-400 mx-auto mb-1" />
                      <h6 className="text-green-400 text-xs font-medium mb-1">Potential Income</h6>
                      <p className="text-white text-sm">{stream.timeVsReward.potentialIncome}</p>
                    </div>
                  </div>

                  <div>
                    <h5 className="text-white font-semibold mb-3">30-Day Ramp-Up Checklist</h5>
                    <div className="bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-4">
                      <ol className="space-y-1 list-decimal list-inside">
                        {stream.rampUpChecklist.map((item, i) => (
                          <li key={i} className="text-gray-300 text-sm">{item}</li>
                        ))}
                      </ol>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Income Diversification Strategy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">ðŸ’¡ Income Diversification Strategy</h4>
              <div className="grid md:grid-cols-3 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-3">Phase 1: Foundation</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Start with the lowest setup time stream</li>
                    <li>â€¢ Focus on consistent daily actions</li>
                    <li>â€¢ Reinvest initial income into tools</li>
                    <li>â€¢ Document processes for outsourcing</li>
                    <li>â€¢ Build audience while earning</li>
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Phase 2: Expansion</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Add second stream after first is stable</li>
                    <li>â€¢ Leverage existing audience for new stream</li>
                    <li>â€¢ Create systems for time management</li>
                    <li>â€¢ Hire help for first stream operations</li>
                    <li>â€¢ Cross-promote between income streams</li>
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Phase 3: Optimization</h5>
                  <ul className="text-gray-300 text-sm space-y-2">
                    <li>â€¢ Focus on highest ROI activities</li>
                    <li>â€¢ Automate repetitive tasks</li>
                    <li>â€¢ Create passive income components</li>
                    <li>â€¢ Build team to manage operations</li>
                    <li>â€¢ Develop exit strategy for each stream</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default IncomeStreamGenerator;