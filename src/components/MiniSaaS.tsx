import React, { useState } from 'react';
import { Layers, Loader2, Lock, Copy, Download, Code, DollarSign, Users, Target } from 'lucide-react';
import { generateMiniSaaS } from '../services/businessFeatures';
import { MiniSaaSResult } from '../types/businessFeatures';

interface MiniSaaSProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const MiniSaaS: React.FC<MiniSaaSProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [saasIdea, setSaasIdea] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [saasResult, setSaasResult] = useState<MiniSaaSResult | null>(null);

  const handleGenerate = async () => {
    if (!saasIdea.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateMiniSaaS(saasIdea);
      setSaasResult(result);
    } catch (error) {
      console.error('Error generating mini SaaS blueprint:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!saasResult) return;

    const content = `
MINI SAAS BLUEPRINT
==================
Generated: ${new Date().toLocaleDateString()}

SAAS IDEA
--------
${saasResult.saasIdea}

PRODUCT DEFINITION
----------------
${saasResult.productDefinition}

CORE FEATURES
-----------
${saasResult.coreFeatures.map((feature, i) => `${i + 1}. ${feature}`).join('\n')}

TECH STACK
---------
Frontend: ${saasResult.techStack.frontend}
Backend: ${saasResult.techStack.backend}
Database: ${saasResult.techStack.database}
Hosting: ${saasResult.techStack.hosting}
Third-party Services: ${saasResult.techStack.thirdPartyServices.join(', ')}

MVP ROADMAP
---------
${saasResult.mvpRoadmap.map((milestone, i) => `Milestone ${i + 1}: ${milestone.milestone}
Timeframe: ${milestone.timeframe}
Tasks: ${milestone.tasks.join(', ')}
`).join('\n')}

PRICING MODEL
-----------
${saasResult.pricingModel.map((tier) => `${tier.tier} - ${tier.price}
Features: ${tier.features.join(', ')}
`).join('\n')}

CUSTOMER ACQUISITION
------------------
${saasResult.customerAcquisition.map((channel, i) => `${i + 1}. ${channel}`).join('\n')}

RESOURCES NEEDED
--------------
${saasResult.resourcesNeeded.map((resource) => `${resource.resource}: ${resource.estimate}`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `mini-saas-blueprint-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Mini SaaS Blueprint™
          </h2>
          <p className="text-gray-400">
            Generate a complete micro-SaaS business plan in seconds
          </p>
        </div>

        {!saasResult ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div>
                <label className="text-white font-medium mb-2 block">Your SaaS Idea</label>
                <textarea
                  value={saasIdea}
                  onChange={(e) => setSaasIdea(e.target.value)}
                  placeholder="Describe your SaaS idea or problem you want to solve..."
                  className="w-full h-32 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                           placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                />
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !saasIdea.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating SaaS Blueprint...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Mini SaaS - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Layers className="w-5 h-5" />
                    <span>Generate SaaS Blueprint</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  ✨ Free trial • No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                🚀 Your Mini SaaS Blueprint is Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Blueprint</span>
              </button>
            </div>

            {/* Product Definition */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-yellow-400 font-bold text-lg mb-4">💡 Product Definition</h3>
              <div className="bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-4">
                <p className="text-gray-300">{saasResult.productDefinition}</p>
              </div>
            </div>

            {/* Core Features */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="text-blue-400 font-bold text-lg">✨ Core Features</h3>
                <button
                  onClick={() => handleCopy(saasResult.coreFeatures.join('\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {saasResult.coreFeatures.map((feature, index) => (
                  <div key={index} className="flex items-start space-x-3 bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                    <span className="bg-blue-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0">
                      {index + 1}
                    </span>
                    <p className="text-gray-300 text-sm">{feature}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Tech Stack */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Code className="w-6 h-6 text-green-400" />
                <h3 className="text-green-400 font-bold text-lg">Tech Stack</h3>
              </div>
              <div className="grid md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h4 className="text-white font-semibold mb-2">Frontend</h4>
                  <p className="text-gray-300 text-sm">{saasResult.techStack.frontend}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h4 className="text-white font-semibold mb-2">Backend</h4>
                  <p className="text-gray-300 text-sm">{saasResult.techStack.backend}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h4 className="text-white font-semibold mb-2">Database</h4>
                  <p className="text-gray-300 text-sm">{saasResult.techStack.database}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h4 className="text-white font-semibold mb-2">Hosting</h4>
                  <p className="text-gray-300 text-sm">{saasResult.techStack.hosting}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h4 className="text-white font-semibold mb-2">Third-party Services</h4>
                  <div className="flex flex-wrap gap-1">
                    {saasResult.techStack.thirdPartyServices.map((service, i) => (
                      <span key={i} className="bg-green-500/10 text-green-400 px-2 py-1 rounded-full text-xs">
                        {service}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* MVP Roadmap */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-purple-400 font-bold text-lg mb-4">🗺️ MVP Roadmap</h3>
              <div className="space-y-6">
                {saasResult.mvpRoadmap.map((milestone, index) => (
                  <div key={index} className="bg-purple-500/10 border border-purple-500/20 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-3">
                      <h4 className="text-purple-400 font-semibold">Milestone {index + 1}: {milestone.milestone}</h4>
                      <span className="bg-gray-900/50 text-gray-300 px-2 py-1 rounded-full text-xs">
                        {milestone.timeframe}
                      </span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {milestone.tasks.map((task, i) => (
                        <span key={i} className="bg-gray-900/50 text-gray-300 px-2 py-1 rounded-full text-xs">
                          {task}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Pricing Model */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <DollarSign className="w-6 h-6 text-green-400" />
                <h3 className="text-green-400 font-bold text-lg">Pricing Model</h3>
              </div>
              <div className="grid md:grid-cols-3 gap-6">
                {saasResult.pricingModel.map((tier, index) => (
                  <div key={index} className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                    <div className="flex justify-between items-center mb-3">
                      <h4 className="text-green-400 font-semibold">{tier.tier}</h4>
                      <span className="bg-gray-900/50 text-white px-3 py-1 rounded-full text-sm font-bold">
                        {tier.price}
                      </span>
                    </div>
                    <ul className="space-y-1">
                      {tier.features.map((feature, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{feature}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>

            {/* Customer Acquisition & Resources */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Users className="w-6 h-6 text-blue-400" />
                  <h3 className="text-blue-400 font-bold text-lg">Customer Acquisition</h3>
                </div>
                <div className="space-y-3">
                  {saasResult.customerAcquisition.map((channel, index) => (
                    <div key={index} className="flex items-start space-x-3 bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                      <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-gray-300 text-sm">{channel}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Target className="w-6 h-6 text-red-400" />
                  <h3 className="text-red-400 font-bold text-lg">Resources Needed</h3>
                </div>
                <div className="space-y-3">
                  {saasResult.resourcesNeeded.map((resource, index) => (
                    <div key={index} className="flex justify-between items-center bg-red-500/10 border border-red-500/20 rounded-lg p-3">
                      <p className="text-gray-300 text-sm">{resource.resource}</p>
                      <span className="bg-gray-900/50 text-white px-2 py-1 rounded-full text-xs">
                        {resource.estimate}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default MiniSaaS;