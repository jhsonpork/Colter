import React, { useState } from 'react';
import { Briefcase, Loader2, Lock, Copy, Download, DollarSign, FileText, Send, ClipboardList } from 'lucide-react';
import { automateAgency } from '../services/moreFeatures';
import { OnePersonAgencyAutomator as OnePersonAgencyAutomatorType } from '../types/moreFeatures';

interface OnePersonAgencyAutomatorProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const OnePersonAgencyAutomator: React.FC<OnePersonAgencyAutomatorProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [service, setService] = useState('');
  const [targetClient, setTargetClient] = useState('');
  const [isAutomating, setIsAutomating] = useState(false);
  const [agency, setAgency] = useState<OnePersonAgencyAutomatorType | null>(null);

  const handleAutomate = async () => {
    if (!service.trim() || !targetClient.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsAutomating(true);
    try {
      const result = await automateAgency(service, targetClient);
      setAgency(result);
    } catch (error) {
      console.error('Error automating agency:', error);
    } finally {
      setIsAutomating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!agency) return;

    let content = `
ONE-PERSON AGENCY AUTOMATOR
==========================
Generated: ${new Date().toLocaleDateString()}

SERVICE & TARGET CLIENT
---------------------
Service: ${agency.service}
Target Client: ${agency.targetClient}

PRICING TIERS
-----------
${agency.pricingTiers.map(tier => 
  `${tier.tier} - ${tier.price}
Deliverables: ${tier.deliverables.join(', ')}
Timeframe: ${tier.timeframe}`
).join('\n\n')}

PORTFOLIO OUTLINE
---------------
Sections: ${agency.portfolioOutline.sections.join(', ')}

Case Studies:
${agency.portfolioOutline.caseStudies.map((study, i) => `${i + 1}. ${study}`).join('\n')}

Testimonial Templates:
${agency.portfolioOutline.testimonials.map((testimonial, i) => `${i + 1}. ${testimonial}`).join('\n')}

COLD PITCH STRATEGY
-----------------
Prospecting Method: ${agency.coldPitchStrategy.prospectingMethod}

Outreach Sequence:
${agency.coldPitchStrategy.outreachSequence.map((message, i) => `Message ${i + 1}: ${message}`).join('\n')}

Follow-Up Strategy: ${agency.coldPitchStrategy.followUpStrategy}

CLIENT ONBOARDING
---------------
Steps:
${agency.clientOnboarding.steps.map((step, i) => `${i + 1}. ${step}`).join('\n')}

Questionnaire:
${agency.clientOnboarding.questionnaire.map((question, i) => `${i + 1}. ${question}`).join('\n')}

Welcome Email:
${agency.clientOnboarding.welcomeEmail}

STANDARD OPERATING PROCEDURES
---------------------------
${agency.sops.map(sop => 
  `${sop.title}
Process: ${sop.process.join(' â†’ ')}
Tools: ${sop.tools.join(', ')}`
).join('\n\n')}

EMAIL SEQUENCES
-------------
${agency.emailSequences.map(sequence => 
  `Purpose: ${sequence.purpose}
Emails:
${sequence.emails.map((email, i) => `Email ${i + 1}: ${email}`).join('\n')}`
).join('\n\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agency-automator-${service.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            One-Person Agency Automatorâ„¢
          </h2>
          <p className="text-gray-400">
            Build an entire done-for-you freelance agency system for any niche
          </p>
        </div>

        {!agency ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Service Offered</label>
                  <input
                    type="text"
                    value={service}
                    onChange={(e) => setService(e.target.value)}
                    placeholder="e.g., SEO, TikTok editing, branding, web design..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Target Client</label>
                  <input
                    type="text"
                    value={targetClient}
                    onChange={(e) => setTargetClient(e.target.value)}
                    placeholder="e.g., creators, coaches, ecommerce, local businesses..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>
              </div>
              
              <button
                onClick={handleAutomate}
                disabled={isAutomating || !service.trim() || !targetClient.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isAutomating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Building Agency System...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Agency Automator - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Briefcase className="w-5 h-5" />
                    <span>Build Agency System</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸ’¼ Agency System for {agency.service}
              </h3>
              <p className="text-gray-400 mb-4">Target Client: {agency.targetClient}</p>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete System</span>
              </button>
            </div>

            {/* Pricing Tiers */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <DollarSign className="w-6 h-6 text-green-400" />
                <h4 className="text-green-400 font-bold text-lg">Pricing Tiers</h4>
              </div>
              <div className="grid md:grid-cols-3 gap-6">
                {agency.pricingTiers.map((tier, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <h5 className="text-white font-semibold mb-2">{tier.tier} - {tier.price}</h5>
                    <p className="text-gray-400 text-xs mb-2">Timeframe: {tier.timeframe}</p>
                    <ul className="space-y-1">
                      {tier.deliverables.map((deliverable, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{deliverable}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>

            {/* Portfolio Outline */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <FileText className="w-6 h-6 text-blue-400" />
                <h4 className="text-blue-400 font-bold text-lg">Portfolio Outline</h4>
              </div>
              <div className="grid md:grid-cols-3 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-2">Sections</h5>
                  <ul className="space-y-1">
                    {agency.portfolioOutline.sections.map((section, i) => (
                      <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{section}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-2">Case Studies</h5>
                  <ul className="space-y-1">
                    {agency.portfolioOutline.caseStudies.map((study, i) => (
                      <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{study}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-2">Testimonial Templates</h5>
                  <ul className="space-y-1">
                    {agency.portfolioOutline.testimonials.map((testimonial, i) => (
                      <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{testimonial}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* Cold Pitch Strategy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <Send className="w-6 h-6 text-purple-400" />
                  <h4 className="text-purple-400 font-bold text-lg">Cold Pitch Strategy</h4>
                </div>
                <button
                  onClick={() => handleCopy(agency.coldPitchStrategy.outreachSequence.join('\n\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Prospecting Method</h5>
                  <p className="text-gray-300 text-sm">{agency.coldPitchStrategy.prospectingMethod}</p>
                </div>
                
                <div>
                  <h5 className="text-white font-semibold mb-2">Outreach Sequence</h5>
                  <div className="space-y-3">
                    {agency.coldPitchStrategy.outreachSequence.map((message, index) => (
                      <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <h6 className="text-purple-400 font-semibold">Message #{index + 1}</h6>
                          <button
                            onClick={() => handleCopy(message)}
                            className="p-1 text-gray-400 hover:text-white transition-colors"
                          >
                            <Copy className="w-3 h-3" />
                          </button>
                        </div>
                        <p className="text-gray-300 text-sm">{message}</p>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Follow-Up Strategy</h5>
                  <p className="text-gray-300 text-sm">{agency.coldPitchStrategy.followUpStrategy}</p>
                </div>
              </div>
            </div>

            {/* Client Onboarding */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">ðŸ”„ Client Onboarding</h4>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-2">Onboarding Steps</h5>
                  <ol className="space-y-1 list-decimal list-inside">
                    {agency.clientOnboarding.steps.map((step, i) => (
                      <li key={i} className="text-gray-300 text-sm">{step}</li>
                    ))}
                  </ol>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-2">Client Questionnaire</h5>
                  <ul className="space-y-1">
                    {agency.clientOnboarding.questionnaire.map((question, i) => (
                      <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{question}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <div className="mt-4 bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-4">
                <div className="flex justify-between items-start mb-2">
                  <h5 className="text-yellow-400 font-semibold">Welcome Email</h5>
                  <button
                    onClick={() => handleCopy(agency.clientOnboarding.welcomeEmail)}
                    className="p-1 text-gray-400 hover:text-white transition-colors"
                  >
                    <Copy className="w-3 h-3" />
                  </button>
                </div>
                <p className="text-gray-300 text-sm">{agency.clientOnboarding.welcomeEmail}</p>
              </div>
            </div>

            {/* SOPs */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <ClipboardList className="w-6 h-6 text-green-400" />
                <h4 className="text-green-400 font-bold text-lg">Standard Operating Procedures</h4>
              </div>
              <div className="space-y-4">
                {agency.sops.map((sop, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <h5 className="text-white font-semibold mb-2">{sop.title}</h5>
                    <div className="mb-3">
                      <h6 className="text-green-400 text-sm font-medium mb-1">Process</h6>
                      <div className="flex items-center">
                        {sop.process.map((step, i) => (
                          <React.Fragment key={i}>
                            <span className="text-gray-300 text-sm bg-gray-800 px-2 py-1 rounded">{step}</span>
                            {i < sop.process.length - 1 && (
                              <div className="px-2">
                                <div className="w-4 h-0.5 bg-green-400"></div>
                              </div>
                            )}
                          </React.Fragment>
                        ))}
                      </div>
                    </div>
                    <div>
                      <h6 className="text-blue-400 text-sm font-medium mb-1">Tools</h6>
                      <div className="flex flex-wrap gap-2">
                        {sop.tools.map((tool, i) => (
                          <span key={i} className="bg-blue-500/10 text-blue-400 px-2 py-1 rounded-full text-xs">
                            {tool}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default OnePersonAgencyAutomator;