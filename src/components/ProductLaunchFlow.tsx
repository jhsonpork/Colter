import React, { useState } from 'react';
import { PackageOpen, Loader2, Lock, Copy, Download, Target, Palette, DollarSign, FileText } from 'lucide-react';
import { buildProductLaunch } from '../services/moreFeatures';
import { ProductLaunchFlow as ProductLaunchFlowType } from '../types/moreFeatures';

interface ProductLaunchFlowProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const ProductLaunchFlow: React.FC<ProductLaunchFlowProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [idea, setIdea] = useState('');
  const [isBuilding, setIsBuilding] = useState(false);
  const [launchPlan, setLaunchPlan] = useState<ProductLaunchFlowType | null>(null);

  const handleBuild = async () => {
    if (!idea.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsBuilding(true);
    try {
      const result = await buildProductLaunch(idea);
      setLaunchPlan(result);
    } catch (error) {
      console.error('Error building product launch:', error);
    } finally {
      setIsBuilding(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!launchPlan) return;

    let content = `
PRODUCT LAUNCH FLOW
==================
Generated: ${new Date().toLocaleDateString()}

PRODUCT IDEA
-----------
${launchPlan.idea}

VALUE PROPOSITION MAP
-------------------
Customer Pains:
${launchPlan.valuePropositionMap.customerPains.map((pain, i) => `${i + 1}. ${pain}`).join('\n')}

Customer Gains:
${launchPlan.valuePropositionMap.customerGains.map((gain, i) => `${i + 1}. ${gain}`).join('\n')}

Pain Relievers:
${launchPlan.valuePropositionMap.painRelievers.map((reliever, i) => `${i + 1}. ${reliever}`).join('\n')}

Gain Creators:
${launchPlan.valuePropositionMap.gainCreators.map((creator, i) => `${i + 1}. ${creator}`).join('\n')}

BRANDING DIRECTION
----------------
Name: ${launchPlan.brandingDirection.name}
Tagline: ${launchPlan.brandingDirection.tagline}
Voice Tone: ${launchPlan.brandingDirection.voiceTone}
Color Palette: ${launchPlan.brandingDirection.colorPalette}

PRICING MODEL
-----------
Strategy: ${launchPlan.pricingModel.strategy}

Tiers:
${launchPlan.pricingModel.tiers.map(tier => 
  `${tier.name} - ${tier.price}
Features: ${tier.features.join(', ')}`
).join('\n\n')}

WEBSITE COPY
----------
Headline: ${launchPlan.websiteCopy.headline}
Subheadline: ${launchPlan.websiteCopy.subheadline}

Features:
${launchPlan.websiteCopy.features.map((feature, i) => 
  `${i + 1}. ${feature.title}
   ${feature.description}`
).join('\n')}

FAQ:
${launchPlan.websiteCopy.faq.map((item, i) => 
  `Q: ${item.question}
A: ${item.answer}`
).join('\n\n')}

WAITLIST PAGE
-----------
${launchPlan.waitlistPage}

LAUNCH TWEETS
-----------
${launchPlan.launchTweets.map((tweet, i) => `Tweet ${i + 1}: ${tweet}`).join('\n\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `product-launch-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Idea â†’ Product â†’ Launch AutoFlow
          </h2>
          <p className="text-gray-400">
            Take any product idea and build every asset needed for launch
          </p>
        </div>

        {!launchPlan ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div>
                <label className="text-white font-medium mb-2 block">Product Idea</label>
                <textarea
                  value={idea}
                  onChange={(e) => setIdea(e.target.value)}
                  placeholder="Describe your product idea in detail..."
                  className="w-full h-32 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                           placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                />
              </div>
              
              <button
                onClick={handleBuild}
                disabled={isBuilding || !idea.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isBuilding ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Building Launch Plan...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Product Launch - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <PackageOpen className="w-5 h-5" />
                    <span>Build Launch Plan</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  âœ¨ Free trial â€¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                ðŸš€ Launch Plan for {launchPlan.brandingDirection.name}
              </h3>
              <p className="text-gray-400 mb-4">{launchPlan.brandingDirection.tagline}</p>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Launch Plan</span>
              </button>
            </div>

            {/* Value Proposition Map */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Target className="w-6 h-6 text-blue-400" />
                <h4 className="text-blue-400 font-bold text-lg">Value Proposition Map</h4>
              </div>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-3">Customer Pains</h5>
                  <ul className="space-y-2">
                    {launchPlan.valuePropositionMap.customerPains.map((pain, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-red-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{pain}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Customer Gains</h5>
                  <ul className="space-y-2">
                    {launchPlan.valuePropositionMap.customerGains.map((gain, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{gain}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Pain Relievers</h5>
                  <ul className="space-y-2">
                    {launchPlan.valuePropositionMap.painRelievers.map((reliever, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{reliever}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Gain Creators</h5>
                  <ul className="space-y-2">
                    {launchPlan.valuePropositionMap.gainCreators.map((creator, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-purple-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{creator}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>

            {/* Branding Direction */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Palette className="w-6 h-6 text-purple-400" />
                <h4 className="text-purple-400 font-bold text-lg">Branding Direction</h4>
              </div>
              <div className="grid md:grid-cols-2 gap-6">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Name & Tagline</h5>
                  <p className="text-gray-300 text-lg font-medium mb-1">{launchPlan.brandingDirection.name}</p>
                  <p className="text-gray-400 text-sm italic">{launchPlan.brandingDirection.tagline}</p>
                </div>
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Voice & Colors</h5>
                  <p className="text-gray-300 text-sm mb-2"><strong>Voice Tone:</strong> {launchPlan.brandingDirection.voiceTone}</p>
                  <p className="text-gray-300 text-sm"><strong>Color Palette:</strong> {launchPlan.brandingDirection.colorPalette}</p>
                </div>
              </div>
            </div>

            {/* Pricing Model */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <DollarSign className="w-6 h-6 text-green-400" />
                <h4 className="text-green-400 font-bold text-lg">Pricing Model</h4>
              </div>
              <div className="bg-gray-900/50 rounded-lg p-4 mb-4">
                <h5 className="text-white font-semibold mb-2">Strategy</h5>
                <p className="text-gray-300 text-sm">{launchPlan.pricingModel.strategy}</p>
              </div>
              <div className="grid md:grid-cols-3 gap-4">
                {launchPlan.pricingModel.tiers.map((tier, index) => (
                  <div key={index} className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                    <h5 className="text-green-400 font-semibold mb-2">{tier.name} - {tier.price}</h5>
                    <ul className="space-y-1">
                      {tier.features.map((feature, i) => (
                        <li key={i} className="text-gray-300 text-sm flex items-start space-x-2">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <span>{feature}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>

            {/* Website Copy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-6 h-6 text-yellow-400" />
                  <h4 className="text-yellow-400 font-bold text-lg">Website Copy</h4>
                </div>
                <button
                  onClick={() => handleCopy(`${launchPlan.websiteCopy.headline}\n\n${launchPlan.websiteCopy.subheadline}\n\nFeatures:\n${launchPlan.websiteCopy.features.map(f => `${f.title}: ${f.description}`).join('\n')}`)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Headline</h5>
                  <p className="text-gray-300 text-lg">{launchPlan.websiteCopy.headline}</p>
                </div>

                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Subheadline</h5>
                  <p className="text-gray-300">{launchPlan.websiteCopy.subheadline}</p>
                </div>

                <div>
                  <h5 className="text-white font-semibold mb-2">Features</h5>
                  <div className="grid md:grid-cols-2 gap-4">
                    {launchPlan.websiteCopy.features.map((feature, index) => (
                      <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                        <h6 className="text-yellow-400 font-semibold mb-1">{feature.title}</h6>
                        <p className="text-gray-300 text-sm">{feature.description}</p>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h5 className="text-white font-semibold mb-2">FAQ</h5>
                  <div className="space-y-3">
                    {launchPlan.websiteCopy.faq.map((item, index) => (
                      <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                        <h6 className="text-yellow-400 font-semibold mb-1">Q: {item.question}</h6>
                        <p className="text-gray-300 text-sm">A: {item.answer}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Launch Tweets */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h4 className="text-blue-400 font-bold text-lg">ðŸš€ Launch Tweets</h4>
                <button
                  onClick={() => handleCopy(launchPlan.launchTweets.join('\n\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {launchPlan.launchTweets.map((tweet, index) => (
                  <div key={index} className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                    <p className="text-gray-300 text-sm">{tweet}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default ProductLaunchFlow;