import React, { useState } from 'react';
import { Rocket, Loader2, Lock, Copy, Download, Target, TrendingUp, Users, DollarSign } from 'lucide-react';
import { generateStartupStrategy } from '../services/businessFeatures';
import { StartupStrategyResult } from '../types/businessFeatures';

interface StartupStrategyProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const StartupStrategy: React.FC<StartupStrategyProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [startupDescription, setStartupDescription] = useState('');
  const [stage, setStage] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [strategyResult, setStrategyResult] = useState<StartupStrategyResult | null>(null);

  const stages = [
    'Idea Stage',
    'Pre-Seed',
    'Seed',
    'Series A',
    'Series B',
    'Growth Stage'
  ];

  const handleGenerate = async () => {
    if (!startupDescription.trim() || !stage) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateStartupStrategy(startupDescription, stage);
      setStrategyResult(result);
    } catch (error) {
      console.error('Error generating startup strategy:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!strategyResult) return;

    const content = `
STARTUP STRATEGY BLUEPRINT
=========================
Generated: ${new Date().toLocaleDateString()}

STARTUP DESCRIPTION
-----------------
${strategyResult.startupDescription}

STAGE: ${strategyResult.stage}

STRATEGIC PRIORITIES
------------------
${strategyResult.strategicPriorities.map((priority, i) => `${i + 1}. ${priority}`).join('\n')}

GROWTH STRATEGY
-------------
${strategyResult.growthStrategy}

MARKET POSITIONING
----------------
${strategyResult.marketPositioning}

COMPETITIVE ADVANTAGE
-------------------
${strategyResult.competitiveAdvantage}

FUNDING STRATEGY
--------------
${strategyResult.fundingStrategy}

90-DAY ACTION PLAN
----------------
${strategyResult.actionPlan.map((action, i) => `${i + 1}. ${action}`).join('\n')}

KEY METRICS
---------
${strategyResult.keyMetrics.map((metric) => `${metric.metric}: ${metric.target}`).join('\n')}

RISK ASSESSMENT
-------------
${strategyResult.riskAssessment.map((risk) => `${risk.risk} - ${risk.mitigation}`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `startup-strategy-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Startup Strategy Generator™
          </h2>
          <p className="text-gray-400">
            Generate a comprehensive startup strategy tailored to your business stage
          </p>
        </div>

        {!strategyResult ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Startup Description</label>
                  <textarea
                    value={startupDescription}
                    onChange={(e) => setStartupDescription(e.target.value)}
                    placeholder="Describe your startup, product, and vision..."
                    className="w-full h-32 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Current Stage</label>
                  <select
                    value={stage}
                    onChange={(e) => setStage(e.target.value)}
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             focus:border-yellow-400 focus:outline-none"
                  >
                    <option value="">Select Current Stage</option>
                    {stages.map((s) => (
                      <option key={s} value={s}>{s}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !startupDescription.trim() || !stage}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Generating Strategy...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Startup Strategy - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Rocket className="w-5 h-5" />
                    <span>Generate Startup Strategy</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  ✨ Free trial • No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                🚀 {strategyResult.stage} Strategy Blueprint
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Strategy</span>
              </button>
            </div>

            {/* Strategic Priorities */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="text-yellow-400 font-bold text-lg">🎯 Strategic Priorities</h3>
                <button
                  onClick={() => handleCopy(strategyResult.strategicPriorities.join('\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {strategyResult.strategicPriorities.map((priority, index) => (
                  <div key={index} className="flex items-start space-x-3 bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-3">
                    <span className="bg-yellow-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0">
                      {index + 1}
                    </span>
                    <p className="text-gray-300 text-sm">{priority}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Growth & Positioning */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <TrendingUp className="w-6 h-6 text-green-400" />
                  <h3 className="text-green-400 font-bold text-lg">Growth Strategy</h3>
                </div>
                <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{strategyResult.growthStrategy}</p>
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Target className="w-6 h-6 text-blue-400" />
                  <h3 className="text-blue-400 font-bold text-lg">Market Positioning</h3>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{strategyResult.marketPositioning}</p>
                </div>
              </div>
            </div>

            {/* Competitive Advantage & Funding */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <h3 className="text-purple-400 font-bold text-lg mb-4">💪 Competitive Advantage</h3>
                <div className="bg-purple-500/10 border border-purple-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{strategyResult.competitiveAdvantage}</p>
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <DollarSign className="w-6 h-6 text-green-400" />
                  <h3 className="text-green-400 font-bold text-lg">Funding Strategy</h3>
                </div>
                <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{strategyResult.fundingStrategy}</p>
                </div>
              </div>
            </div>

            {/* 90-Day Action Plan */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="text-red-400 font-bold text-lg">📅 90-Day Action Plan</h3>
                <button
                  onClick={() => handleCopy(strategyResult.actionPlan.join('\n'))}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-3">
                {strategyResult.actionPlan.map((action, index) => (
                  <div key={index} className="flex items-start space-x-3 bg-red-500/10 border border-red-500/20 rounded-lg p-3">
                    <span className="bg-red-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0">
                      {index + 1}
                    </span>
                    <p className="text-gray-300 text-sm">{action}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Key Metrics */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-blue-400 font-bold text-lg mb-4">📊 Key Metrics to Track</h3>
              <div className="grid md:grid-cols-3 gap-4">
                {strategyResult.keyMetrics.map((metric, index) => (
                  <div key={index} className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                    <h4 className="text-blue-400 font-semibold mb-2">{metric.metric}</h4>
                    <p className="text-white font-medium">{metric.target}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Risk Assessment */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-yellow-400 font-bold text-lg mb-4">⚠️ Risk Assessment</h3>
              <div className="space-y-4">
                {strategyResult.riskAssessment.map((risk, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <h4 className="text-white font-semibold mb-2">{risk.risk}</h4>
                    <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-3">
                      <h5 className="text-yellow-400 text-sm font-medium mb-1">Mitigation Strategy:</h5>
                      <p className="text-gray-300 text-sm">{risk.mitigation}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default StartupStrategy;