import React, { useState } from 'react';
import { Rocket, Loader2, Lock, Copy, Download, Briefcase, DollarSign, Code, FileText, Send } from 'lucide-react';
import { buildStartupEngine } from '../services/moreFeatures';
import { ZeroToStartupEngine as ZeroToStartupEngineType } from '../types/moreFeatures';

interface ZeroToStartupEngineProps {
  onUpgradeClick: () => void;
  hasUsedFreeTrial: boolean;
}

const ZeroToStartupEngine: React.FC<ZeroToStartupEngineProps> = ({ onUpgradeClick, hasUsedFreeTrial }) => {
  const [problem, setProblem] = useState('');
  const [niche, setNiche] = useState('');
  const [isBuilding, setIsBuilding] = useState(false);
  const [startupPlan, setStartupPlan] = useState<ZeroToStartupEngineType | null>(null);

  const handleBuild = async () => {
    if (!problem.trim() || !niche.trim()) return;
    
    if (hasUsedFreeTrial) {
      onUpgradeClick();
      return;
    }

    setIsBuilding(true);
    try {
      const result = await buildStartupEngine(problem, niche);
      setStartupPlan(result);
    } catch (error) {
      console.error('Error building startup plan:', error);
    } finally {
      setIsBuilding(false);
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleDownload = () => {
    if (!startupPlan) return;

    const content = `
ZERO-TO-STARTUP ENGINE BLUEPRINT
================================
Generated: ${new Date().toLocaleDateString()}

PROBLEM & NICHE
--------------
Problem: ${startupPlan.problem}
Niche/Industry: ${startupPlan.niche}

BUSINESS MODEL
-------------
${startupPlan.businessModel}

MONETIZATION STRATEGY
-------------------
${startupPlan.monetizationStrategy}

MVP SCOPE
--------
Features:
${startupPlan.mvpScope.features.map((feature, i) => `${i + 1}. ${feature}`).join('\n')}

Prioritization:
${startupPlan.mvpScope.prioritization}

TECH STACK
---------
${startupPlan.techStack.join(', ')}

LANDING PAGE COPY
---------------
Headline: ${startupPlan.landingPageCopy.headline}
Subheadline: ${startupPlan.landingPageCopy.subheadline}

Value Props:
${startupPlan.landingPageCopy.valueProps.map((prop, i) => `${i + 1}. ${prop}`).join('\n')}

CTA: ${startupPlan.landingPageCopy.cta}

COLD EMAILS
----------
${startupPlan.coldEmails.map((email, i) => `Email ${i + 1}:\n${email}\n`).join('\n')}

7-DAY LAUNCH PLAN
---------------
${startupPlan.launchPlan.map(day => `Day ${day.day}:\nTasks: ${day.tasks.join(', ')}\nGoals: ${day.goals}\n`).join('\n')}

---
Generated by NexusAI
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `startup-blueprint-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <section className="px-6 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-white mb-4">
            Zero-to-Startup Engine‚Ñ¢
          </h2>
          <p className="text-gray-400">
            Turn any idea into a full-blown startup blueprint in minutes
          </p>
        </div>

        {!startupPlan ? (
          <div className="max-w-2xl mx-auto">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-8">
              <div className="space-y-4">
                <div>
                  <label className="text-white font-medium mb-2 block">Problem to Solve</label>
                  <textarea
                    value={problem}
                    onChange={(e) => setProblem(e.target.value)}
                    placeholder="Describe the problem your startup idea will solve..."
                    className="w-full h-32 bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none resize-none"
                  />
                </div>

                <div>
                  <label className="text-white font-medium mb-2 block">Niche or Industry</label>
                  <input
                    type="text"
                    value={niche}
                    onChange={(e) => setNiche(e.target.value)}
                    placeholder="e.g., fintech, healthcare, education, e-commerce..."
                    className="w-full bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-3 text-white 
                             placeholder-gray-400 focus:border-yellow-400 focus:outline-none"
                  />
                </div>
              </div>
              
              <button
                onClick={handleBuild}
                disabled={isBuilding || !problem.trim() || !niche.trim()}
                className="w-full mt-6 px-6 py-4 bg-gradient-to-r from-yellow-400 to-amber-500 text-black 
                         font-bold rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         shadow-lg shadow-yellow-400/25 hover:shadow-yellow-400/40 disabled:opacity-50 
                         disabled:cursor-not-allowed flex items-center justify-center space-x-2"
              >
                {isBuilding ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Building Startup Blueprint...</span>
                  </>
                ) : hasUsedFreeTrial ? (
                  <>
                    <Lock className="w-5 h-5" />
                    <span>Unlock Startup Engine - $9.99/mo</span>
                  </>
                ) : (
                  <>
                    <Rocket className="w-5 h-5" />
                    <span>Build Startup Blueprint</span>
                  </>
                )}
              </button>
              
              {!hasUsedFreeTrial && (
                <p className="text-center text-gray-400 text-sm mt-3">
                  ‚ú® Free trial ‚Ä¢ No credit card required
                </p>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-8 animate-fade-in">
            {/* Header with Download */}
            <div className="text-center bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h3 className="text-2xl font-bold text-white mb-4">
                üöÄ Your Startup Blueprint is Ready!
              </h3>
              <button
                onClick={handleDownload}
                className="px-6 py-3 bg-gradient-to-r from-yellow-400 to-amber-500 text-black font-semibold 
                         rounded-lg hover:from-yellow-300 hover:to-amber-400 transition-all duration-300 
                         flex items-center space-x-2 mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>Download Complete Blueprint</span>
              </button>
            </div>

            {/* Business Model & Monetization */}
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <Briefcase className="w-6 h-6 text-blue-400" />
                  <h4 className="text-blue-400 font-bold text-lg">Business Model</h4>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{startupPlan.businessModel}</p>
                </div>
              </div>

              <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <DollarSign className="w-6 h-6 text-green-400" />
                  <h4 className="text-green-400 font-bold text-lg">Monetization Strategy</h4>
                </div>
                <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                  <p className="text-gray-300">{startupPlan.monetizationStrategy}</p>
                </div>
              </div>
            </div>

            {/* MVP Scope */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">üîç MVP Scope</h4>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h5 className="text-white font-semibold mb-3">Features</h5>
                  <ul className="space-y-2">
                    {startupPlan.mvpScope.features.map((feature, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="text-white font-semibold mb-3">Prioritization</h5>
                  <div className="bg-gray-900/50 rounded-lg p-4">
                    <p className="text-gray-300 text-sm">{startupPlan.mvpScope.prioritization}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Tech Stack */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Code className="w-6 h-6 text-purple-400" />
                <h4 className="text-purple-400 font-bold text-lg">Tech Stack</h4>
              </div>
              <div className="flex flex-wrap gap-2">
                {startupPlan.techStack.map((tech, index) => (
                  <span key={index} className="bg-purple-500/10 text-purple-400 px-3 py-1 rounded-full text-sm">
                    {tech}
                  </span>
                ))}
              </div>
            </div>

            {/* Landing Page Copy */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-6 h-6 text-yellow-400" />
                  <h4 className="text-yellow-400 font-bold text-lg">Landing Page Copy</h4>
                </div>
                <button
                  onClick={() => handleCopy(`${startupPlan.landingPageCopy.headline}\n\n${startupPlan.landingPageCopy.subheadline}\n\n${startupPlan.landingPageCopy.valueProps.join('\n')}\n\n${startupPlan.landingPageCopy.cta}`)}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Headline</h5>
                  <p className="text-gray-300 text-lg">{startupPlan.landingPageCopy.headline}</p>
                </div>

                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Subheadline</h5>
                  <p className="text-gray-300">{startupPlan.landingPageCopy.subheadline}</p>
                </div>

                <div className="bg-gray-900/50 rounded-lg p-4">
                  <h5 className="text-white font-semibold mb-2">Value Propositions</h5>
                  <ul className="space-y-2">
                    {startupPlan.landingPageCopy.valueProps.map((prop, index) => (
                      <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                        <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span>{prop}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="bg-yellow-400/10 border border-yellow-400/20 rounded-lg p-4">
                  <h5 className="text-yellow-400 font-semibold mb-2">Call to Action</h5>
                  <p className="text-white font-medium">{startupPlan.landingPageCopy.cta}</p>
                </div>
              </div>
            </div>

            {/* Cold Emails */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Send className="w-6 h-6 text-blue-400" />
                <h4 className="text-blue-400 font-bold text-lg">Cold Emails</h4>
              </div>
              <div className="space-y-4">
                {startupPlan.coldEmails.map((email, index) => (
                  <div key={index} className="bg-gray-900/50 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <h5 className="text-white font-semibold">Email #{index + 1}</h5>
                      <button
                        onClick={() => handleCopy(email)}
                        className="p-2 text-gray-400 hover:text-white transition-colors"
                      >
                        <Copy className="w-4 h-4" />
                      </button>
                    </div>
                    <p className="text-gray-300 text-sm whitespace-pre-line">{email}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* 7-Day Launch Plan */}
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6">
              <h4 className="text-yellow-400 font-bold text-lg mb-4">üìÖ 7-Day Launch Plan</h4>
              <div className="space-y-4">
                {startupPlan.launchPlan.map((day) => (
                  <div key={day.day} className="bg-gray-900/50 rounded-lg p-4">
                    <h5 className="text-white font-semibold mb-2">Day {day.day}</h5>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h6 className="text-blue-400 text-sm font-medium mb-1">Tasks</h6>
                        <ul className="space-y-1">
                          {day.tasks.map((task, index) => (
                            <li key={index} className="text-gray-300 text-sm flex items-start space-x-2">
                              <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                              <span>{task}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h6 className="text-green-400 text-sm font-medium mb-1">Goals</h6>
                        <p className="text-gray-300 text-sm">{day.goals}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default ZeroToStartupEngine;